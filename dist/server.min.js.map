{"version":3,"sources":["server.js"],"names":["express","require","mongoose","bcrypt","cors","urlencoded","app","use","extended","Schema","username","USER","String","required","email","password","type","model","dashboard","fs","readFileSync","post","req","res","regeneratorRuntime","async","_context","prev","next","console","log","body","awrap","userModel","create","hashSync","sent","json","status","t0","stop","user","_context2","findOne","connect","then","listen","PORT","err"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,SAAWD,QAAQ,YADnBD,GAAOC,QAAGA,MAGVE,OAASF,QAAQ,UAEjBG,KAAOH,QAAQ,iBAHrBA,QAAA,eAAQI,oBAAAA,WACFF,IAAMH,UAMZM,IAAIC,IAAIP,QAAQK,WAAW,CAACG,UAAS,KAJrCF,IAAMF,IAAIJ,QAAGC,QAMbK,IAAIC,IAAIH,QAFRE,KAAA,IAA4BE,IAAAA,KAAS,IAAAN,SAAAO,OAAA,CAArCC,SAAA,CACQV,KAAAA,OACAI,SAAR,EAAA,EAAA,sBAMMO,SAAO,CACTD,KAASE,OACDC,UADC,GADoBC,MAAA,CAK7BC,KAASH,OACDC,UADC,EAELA,QAAS,KAGTG,UADEd,SAAAe,MAAA,OAAAN,MATVO,UAAAC,GAAAC,aAAA,eAAA,SAuBAd,IAAIe,KAAK,SAAU,SAAAC,EAAAC,GAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAC,QAAAC,IAAAR,EAAAS,KAAAhB,UAAAW,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAQ,MAAAC,UAAAC,OAAA,CAAAxB,SAAAY,EAAAS,KAAArB,SAAAK,SAAAZ,OAAAgC,SAAAb,EAAAS,KAAAhB,UACfc,MAAQC,EAAIR,KAAIS,SADD,KAAA,EAAAL,EAAAU,KAAAb,EAAAc,KAAA,CAAAC,OAAA,OAAAZ,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAa,GAAAb,EAAA,MAAA,GAIPhB,EAAAA,KAAAA,CAAAA,OAAcqB,QAAKrB,MADa,qBAHzB,KAAA,GAAA,IAAA,MAAA,OAAAgB,EAAAc,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAGLC,IAAAA,KAAAA,SAHK,SAAAnB,EAAAC,GAAA,OAAAC,mBAAAC,MAAA,SAAAiB,GAAA,OAAA,OAAAA,EAAAf,KAAAe,EAAAd,MAAA,KAAA,EAAA,OAAAc,EAAAd,KAAA,EAAAJ,mBAAAQ,MAQFC,UAAAU,QAAA,CAACL,MAAAA,EAAMP,KAAEjB,MAATC,SAATO,EAAAS,KAAAhB,YARW,KAAA,EAAA2B,EAAAN,KAsBXb,EAAIc,KAAK,CAACC,OAAQ,OAAOG,MAAK,IAtBnBlB,EAAAc,KAAA,CAAAC,OAAA,QAAAG,MAAA,IAAA,KAAA,EAAA,IAAA,MAAA,OAAAC,EAAAF,YAUFtC,SAoBd0C,QAAQ,kCA9BQC,KAAA,WAAAhB,QAAAC,IAAA,mBAAAxB,IAAAwC,OAAAC,KAAA,WAAAlB,QAAAC,IAAA,qBAAAiB,UAUF,MA4BR,SAACC,GAAD,OAASnB,QAAQC,IAAIkB","file":"server.min.js","sourcesContent":["const express = require(\"express\");\r\nconst mongoose = require(\"mongoose\");\r\nconst fs = require('fs');\r\nconst bcrypt = require('bcrypt')\r\n\r\nconst cors = require(\"cors\");\r\nconst { urlencoded } = require(\"body-parser\");\r\n\r\nconst app = express();\r\napp.use(express.urlencoded({extended:false}))\r\napp.use(express.json())\r\napp.use(cors());\r\n\r\n\r\n\r\n\r\nPORT = 8000;\r\nconst USER = new mongoose.Schema({\r\n    username:{\r\n        type:String,\r\n        required: [true, \"username required\"]\r\n    },\r\n    password:{\r\n        type: String,\r\n        required:true\r\n    },\r\n    email:{\r\n        type:String,\r\n        required: true,\r\n        unique: true,\r\n    },\r\n})\r\nconst userModel = mongoose.model('User', USER)\r\n\r\n\r\n\r\nconst dashboard = fs.readFileSync('./index.html', 'utf-8')\r\n\r\n\r\n//CREATE\r\napp.post('/users', async (req,res)=>{\r\n    console.log(req.body.password)\r\n    try {\r\n        const user = await userModel.create({\r\n            username: req.body.username,\r\n            password:bcrypt.hashSync(req.body.password),\r\n            email:req.body.email,\r\n        })\r\n        res.json({status: \"ok\"})\r\n    } catch (error) {\r\n        res.json({status: \"error\", error: \" Duplicate email\"})\r\n        \r\n    }\r\n})\r\n//LOGIN\r\n\r\napp.post('/login',  async(req,res)=>{\r\n    const user =await userModel.findOne({\r\n        email:req.body.email,\r\n        password:req.body.password,\r\n    })\r\n    if(user){\r\n        res.json({status: 'okay',user:true})\r\n    }\r\n    else{\r\n        res.json({status:'Error', user: false})\r\n    }\r\n})\r\n\r\nmongoose\r\n  .connect(\"mongodb://localhost:27017/CRUD\")\r\n  .then(() => {\r\n    console.log(\"Connected to DB\");\r\n    //run server\r\n    app.listen(PORT, () => {\r\n      console.log(\"Server Running on \" + PORT);\r\n    });\r\n  })\r\n  .catch((err) => console.log(err));\r\n"]}