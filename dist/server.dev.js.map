{"version":3,"sources":["server.js"],"names":["express","require","mongoose","fs","bcrypt","cors","urlencoded","app","use","extended","json","PORT","USER","Schema","username","type","String","required","password","email","unique","userModel","model","dashboard","readFileSync","post","req","res","console","log","body","create","hashSync","user","status","error","findOne","connect","then","listen","err"],"mappings":"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","sourcesContent":["const express = require(\"express\");\r\nconst mongoose = require(\"mongoose\");\r\nconst fs = require('fs');\r\nconst bcrypt = require('bcrypt')\r\n\r\nconst cors = require(\"cors\");\r\nconst { urlencoded } = require(\"body-parser\");\r\n\r\nconst app = express();\r\napp.use(express.urlencoded({extended:false}))\r\napp.use(express.json())\r\napp.use(cors());\r\n\r\n\r\n\r\n\r\nPORT = 8000;\r\nconst USER = new mongoose.Schema({\r\n    username:{\r\n        type:String,\r\n        required: [true, \"username required\"]\r\n    },\r\n    password:{\r\n        type: String,\r\n        required:true\r\n    },\r\n    email:{\r\n        type:String,\r\n        required: true,\r\n        unique: true,\r\n    },\r\n})\r\nconst userModel = mongoose.model('User', USER)\r\n\r\n\r\n\r\nconst dashboard = fs.readFileSync('./index.html', 'utf-8')\r\n\r\n\r\n//CREATE\r\napp.post('/users', async (req,res)=>{\r\n    console.log(req.body.password)\r\n    try {\r\n        const user = await userModel.create({\r\n            username: req.body.username,\r\n            password:bcrypt.hashSync(req.body.password),\r\n            email:req.body.email,\r\n        })\r\n        res.json({status: \"ok\"})\r\n    } catch (error) {\r\n        res.json({status: \"error\", error: \" Duplicate email\"})\r\n        \r\n    }\r\n})\r\n//LOGIN\r\n\r\napp.post('/login',  async(req,res)=>{\r\n    const user =await userModel.findOne({\r\n        email:req.body.email,\r\n        password:req.body.password,\r\n    })\r\n    if(user){\r\n        res.json({status: 'okay',user:true})\r\n    }\r\n    else{\r\n        res.json({status:'Error', user: false})\r\n    }\r\n})\r\n\r\nmongoose\r\n  .connect(\"mongodb://localhost:27017/CRUD\")\r\n  .then(() => {\r\n    console.log(\"Connected to DB\");\r\n    //run server\r\n    app.listen(PORT, () => {\r\n      console.log(\"Server Running on \" + PORT);\r\n    });\r\n  })\r\n  .catch((err) => console.log(err));\r\n"],"file":"server.dev.js"}