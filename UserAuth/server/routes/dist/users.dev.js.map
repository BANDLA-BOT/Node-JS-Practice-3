{"version":3,"sources":["users.js"],"names":["router","require","Router","User","validate","bcrypt","post","req","res","body","error","status","send","message","details","findOne","email","user","genSal","Number","process","env","SALT","salt","hash","password","hashPassword","save"],"mappings":";;;;;;;;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBC,MAAnB,EAAf;;eAC0BD,OAAO,CAAC,gBAAD,C;IAAzBE,I,YAAAA,I;IAAMC,Q,YAAAA,Q;;AACd,IAAMC,MAAM,GAAGJ,OAAO,CAAC,QAAD,CAAtB;;AAEAD,MAAM,CAACM,IAAP,CAAY,GAAZ,EAAgB,iBAAMC,GAAN,EAAUC,GAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEOJ,QAAQ,CAACG,GAAG,CAACE,IAAL,CAFf,EAEFC,KAFE,aAEFA,KAFE;;AAAA,eAGLA,KAHK;AAAA;AAAA;AAAA;;AAAA,2CAGSF,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAACH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiBD;AAA1B,WAArB,CAHT;;AAAA;AAAA;AAAA,0CAIWV,IAAI,CAACY,OAAL,CAAa;AAACC,YAAAA,KAAK,EAACT,GAAG,CAACE,IAAJ,CAASO;AAAhB,WAAb,CAJX;;AAAA;AAIFC,UAAAA,IAJE;;AAAA,eAKTA,IALS;AAAA;AAAA;AAAA;;AAAA,2CAKIT,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAC;AAAT,WAArB,CALJ;;AAAA;AAAA;AAAA,0CAOWR,MAAM,CAACa,MAAP,CAAcC,MAAM,CAACC,OAAO,CAACC,GAAR,CAAYC,IAAb,CAApB,CAPX;;AAAA;AAOFC,UAAAA,IAPE;AAAA;AAAA,0CAQmBlB,MAAM,CAACmB,IAAP,CAAYjB,GAAG,CAACE,IAAJ,CAASgB,QAArB,EAA+BF,IAA/B,CARnB;;AAAA;AAQFG,UAAAA,YARE;AAAA;AAAA,0CASF,IAAIvB,IAAJ,mBAAcI,GAAG,CAACE,IAAlB;AAAuBgB,YAAAA,QAAQ,EAACC;AAAhC,cAA+CC,IAA/C,EATE;;AAAA;AAURnB,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAC;AAAT,WAArB;AAVQ;AAAA;;AAAA;AAAA;AAAA;AAaRL,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAE;AAAV,WAArB;;AAbQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB","sourcesContent":["const router = require(\"express\").Router();\r\nconst { User, validate} = require('../models/user')\r\nconst bcrypt = require('bcrypt')\r\n\r\nrouter.post('/',async(req,res)=>{\r\n    try{\r\n        const{error} = validate(req.body)\r\n        if(error) return res.status(400).send({message:error.details[0].message})\r\n        const user = await User.findOne({email:req.body.email})\r\n    if(user) return res.status(409).send({message:\"User already existed with this email id\"})\r\n\r\n        const salt = await bcrypt.genSal(Number(process.env.SALT))\r\n        const hashPassword = await bcrypt.hash(req.body.password, salt)\r\n        await new User ({...req.body,password:hashPassword}).save();\r\n        res.status(201).send({message:\"User created successfully\"})\r\n    }\r\n    catch(err){\r\n        res.status(500).send({message: \"Internal server error\"})\r\n    }\r\n})"],"file":"users.dev.js"}