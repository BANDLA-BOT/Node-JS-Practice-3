{"version":3,"sources":["auth.js"],"names":["router","require","Router","User","Joi","req","res","_validate","error","user","token","regeneratorRuntime","async","_context","prev","next","validate","body","abrupt","send","message","details","awrap","findOne","email","post","sent","status","bcrypt","compare","password","generateAuthToken","data","t0","stop","object","string","required","label"],"mappings":"aAAA,IAAMA,OAASC,QAAQ,WAAWC,kBACjBD,QAAQ,kBAAjBE,cAAAA,KADFH,OAASC,QAAQ,UAGjBG,IAAMH,QAAQ,OAEpBD,OAJQG,KAII,IAAK,SAAOE,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAAAF,EAAAC,KAAA,EAAAP,EAHKS,SAAAX,EAAtBY,MAAYT,EAGKD,EAHLC,MAGK,OAAAK,EAAAK,OAAA,SAFLjB,EAAAA,OAAQ,KAApBkB,KAAA,CAAAC,QAAAZ,EAAAa,QAAA,GAAAD,WAEiBP,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAW,MAAAnB,KAAAoB,QAAOlB,CAAAA,MAAPA,EAAAY,KAAAO,SAAA,KAAA,EAAA,GAAVC,EAAUZ,EAAAa,KAAA,CAAAb,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAK,OAAA,SAQPZ,EAAIqB,OAAO,KAAKR,KAAK,CAAEC,QAAS,+BARzB,KAAA,EAAA,OAAAP,EAAAE,KAAA,GAAAJ,mBAAAW,MAAAM,OAAAC,QAAAxB,EAAAY,KAAAa,SAAArB,EAAAqB,WAAA,KAAA,GAAA,GAAAjB,EAAAa,KAAA,CAAAb,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAK,OAAA,SAePZ,EAAIqB,OAAO,KAAKR,KAAK,CAAEC,QAAS,+BAfzB,KAAA,GAAAV,EAAAD,EAAAsB,oBAAAzB,EAAAqB,OAAA,KAAAR,KAAA,CAAAa,KAAAtB,EAAAU,QAAA,2BAAAP,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAoB,GAAApB,EAAA,MAAA,GAoBfP,EAAIqB,OAAO,KAAKR,KAAK,CAAEC,QAAS,0BApBjB,KAAA,GAAA,IAAA,MAAA,OAAAP,EAAAqB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QAwBjB,IAAMlB,SAAW,SAACgB,GAlBgB,OANjB5B,IAAA+B,OAAA,CAAAX,MAAApB,IAAAgC,SAAAZ,QAAAa,WAAAC,MAAA,SAAAR,SAAA1B,IAAAgC,SAAAC,WAAAC,MAMInC,cANJa,SAAAgB,IAMTvB,OAAAA,QANST","file":"auth.min.js","sourcesContent":["const router = require(\"express\").Router();\r\nconst { User } = require(\"../models/user\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst Joi = require(\"joi\");\r\n\r\nrouter.post(\"/\", async (req, res) => {\r\n\ttry {\r\n\t\tconst { error } = validate(req.body);\r\n\t\tif (error)\r\n\t\t\treturn res.status(400).send({ message: error.details[0].message });\r\n\r\n\t\tconst user = await User.findOne({ email: req.body.email });\r\n\t\tif (!user)\r\n\t\t\treturn res.status(401).send({ message: \"Invalid Email or Password\" });\r\n\r\n\t\tconst validPassword = await bcrypt.compare(\r\n\t\t\treq.body.password,\r\n\t\t\tuser.password\r\n\t\t);\r\n\t\tif (!validPassword)\r\n\t\t\treturn res.status(401).send({ message: \"Invalid Email or Password\" });\r\n\r\n\t\tconst token = user.generateAuthToken();\r\n\t\tres.status(200).send({ data: token, message: \"logged in successfully\" });\r\n\t} catch (error) {\r\n\t\tres.status(500).send({ message: \"Internal Server Error\" });\r\n\t}\r\n});\r\n\r\nconst validate = (data) => {\r\n\tconst schema = Joi.object({\r\n\t\temail: Joi.string().email().required().label(\"Email\"),\r\n\t\tpassword: Joi.string().required().label(\"Password\"),\r\n\t});\r\n\treturn schema.validate(data);\r\n};\r\n\r\nmodule.exports = router;"]}