{"version":3,"sources":["users.js"],"names":["router","require","Router","User","validate","bcrypt","post","req","res","_validate","error","salt","hashPassword","regeneratorRuntime","async","_context","prev","next","body","abrupt","status","send","message","details","awrap","email","sent","genSal","Number","process","env","SALT","hash","password","_objectSpread","save","t0","stop"],"mappings":"wuBAAA,IAAMA,OAASC,QAAQ,WAAWC,kBACRD,QAAQ,kBAA1BE,cAAAA,KAAMC,kBAAAA,SACRC,OAASJ,QAAQ,UAEvBD,OAAOM,KAAK,IAAI,SAAMC,EAAIC,GAAV,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAAAF,EAAAC,KAAA,EAAAP,EAEOL,SAASG,EAAIW,MAAtBR,EAFED,EAEFC,MAFE,OAAAK,EAAAI,OAAA,SAGSX,EAAIY,OAAO,KAAKC,KAAK,CAACC,QAAQZ,EAAMa,QAAQ,GAAGD,WAHxDP,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAW,MAJOrB,KAAWD,QAAlC,CAAAuB,MAAAlB,EAAAW,KAAAO,SAIgB,KAAA,EAAA,GAAAV,EAAAW,KAAA,OAAAX,EAAAI,OAAA,SAKIX,EAAIY,OAAO,KAAKC,KAAK,CAACC,QAAQ,6CALlCP,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,GAAAJ,mBAAAW,MAOWnB,OAAOsB,OAAOC,OAAOC,QAAQC,IAAIC,QAP5C,KAAA,GAAA,OAOFpB,EAPEI,EAAAW,KAAAX,EAAAE,KAAA,GAAAJ,mBAAAW,MAQmBnB,OAAO2B,KAAKzB,EAAIW,KAAKe,SAAUtB,IARlD,KAAA,GAAA,OAQFC,EAREG,EAAAW,KAAAX,EAAAE,KAAA,GAAAJ,mBAAAW,MASF,IAAIrB,KAAJ+B,cAAA,GAAc3B,EAAIW,KAAlB,CAAuBe,SAASrB,KAAeuB,QAT7C,KAAA,GAFV9B,EAAMe,OAAGnB,KAAQoB,KAAD,CAAtBC,QAAA,8BAEgBP,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAqB,GAAArB,EAAA,MAAA,GAAAP,EAAAY,OAAA,KAAAC,KAAA,CAAAC,QAAA,0BAAA,KAAA,GAAA,IAAA,MAAA,OAAAP,EAAAsB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"users.min.js","sourcesContent":["const router = require(\"express\").Router();\r\nconst { User, validate} = require('../models/user')\r\nconst bcrypt = require('bcrypt')\r\n\r\nrouter.post('/',async(req,res)=>{\r\n    try{\r\n        const{error} = validate(req.body)\r\n        if(error) return res.status(400).send({message:error.details[0].message})\r\n        const user = await User.findOne({email:req.body.email})\r\n    if(user) return res.status(409).send({message:\"User already existed with this email id\"})\r\n\r\n        const salt = await bcrypt.genSal(Number(process.env.SALT))\r\n        const hashPassword = await bcrypt.hash(req.body.password, salt)\r\n        await new User ({...req.body,password:hashPassword}).save();\r\n        res.status(201).send({message:\"User created successfully\"})\r\n    }\r\n    catch(err){\r\n        res.status(500).send({message: \"Internal server error\"})\r\n    }\r\n})"]}