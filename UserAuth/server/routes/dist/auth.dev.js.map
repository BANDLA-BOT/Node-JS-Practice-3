{"version":3,"sources":["auth.js"],"names":["router","require","Router","User","bcrypt","Joi","post","req","res","validate","body","error","status","send","message","details","findOne","email","user","compare","password","validPassword","token","generateAuthToken","data","schema","object","string","required","label","module","exports"],"mappings":";;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBC,MAAnB,EAAf;;eACiBD,OAAO,CAAC,gBAAD,C;IAAhBE,I,YAAAA,I;;AACR,IAAMC,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMI,GAAG,GAAGJ,OAAO,CAAC,KAAD,CAAnB;;AAEAD,MAAM,CAACM,IAAP,CAAY,GAAZ,EAAiB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEGC,QAAQ,CAACF,GAAG,CAACG,IAAL,CAFX,EAEPC,KAFO,aAEPA,KAFO;;AAAA,eAGXA,KAHW;AAAA;AAAA;AAAA;;AAAA,2CAIPH,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiBD;AAA5B,WAArB,CAJO;;AAAA;AAAA;AAAA,0CAMIX,IAAI,CAACa,OAAL,CAAa;AAAEC,YAAAA,KAAK,EAAEV,GAAG,CAACG,IAAJ,CAASO;AAAlB,WAAb,CANJ;;AAAA;AAMTC,UAAAA,IANS;;AAAA,cAOVA,IAPU;AAAA;AAAA;AAAA;;AAAA,2CAQPV,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CARO;;AAAA;AAAA;AAAA,0CAUaV,MAAM,CAACe,OAAP,CAC3BZ,GAAG,CAACG,IAAJ,CAASU,QADkB,EAE3BF,IAAI,CAACE,QAFsB,CAVb;;AAAA;AAUTC,UAAAA,aAVS;;AAAA,cAcVA,aAdU;AAAA;AAAA;AAAA;;AAAA,2CAePb,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAfO;;AAAA;AAiBTQ,UAAAA,KAjBS,GAiBDJ,IAAI,CAACK,iBAAL,EAjBC;AAkBff,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEW,YAAAA,IAAI,EAAEF,KAAR;AAAeR,YAAAA,OAAO,EAAE;AAAxB,WAArB;AAlBe;AAAA;;AAAA;AAAA;AAAA;AAoBfN,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;;AApBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;;AAwBA,IAAML,QAAQ,GAAG,SAAXA,QAAW,CAACe,IAAD,EAAU;AAC1B,MAAMC,MAAM,GAAGpB,GAAG,CAACqB,MAAJ,CAAW;AACzBT,IAAAA,KAAK,EAAEZ,GAAG,CAACsB,MAAJ,GAAaV,KAAb,GAAqBW,QAArB,GAAgCC,KAAhC,CAAsC,OAAtC,CADkB;AAEzBT,IAAAA,QAAQ,EAAEf,GAAG,CAACsB,MAAJ,GAAaC,QAAb,GAAwBC,KAAxB,CAA8B,UAA9B;AAFe,GAAX,CAAf;AAIA,SAAOJ,MAAM,CAAChB,QAAP,CAAgBe,IAAhB,CAAP;AACA,CAND;;AAQAM,MAAM,CAACC,OAAP,GAAiB/B,MAAjB","sourcesContent":["const router = require(\"express\").Router();\r\nconst { User } = require(\"../models/user\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst Joi = require(\"joi\");\r\n\r\nrouter.post(\"/\", async (req, res) => {\r\n\ttry {\r\n\t\tconst { error } = validate(req.body);\r\n\t\tif (error)\r\n\t\t\treturn res.status(400).send({ message: error.details[0].message });\r\n\r\n\t\tconst user = await User.findOne({ email: req.body.email });\r\n\t\tif (!user)\r\n\t\t\treturn res.status(401).send({ message: \"Invalid Email or Password\" });\r\n\r\n\t\tconst validPassword = await bcrypt.compare(\r\n\t\t\treq.body.password,\r\n\t\t\tuser.password\r\n\t\t);\r\n\t\tif (!validPassword)\r\n\t\t\treturn res.status(401).send({ message: \"Invalid Email or Password\" });\r\n\r\n\t\tconst token = user.generateAuthToken();\r\n\t\tres.status(200).send({ data: token, message: \"logged in successfully\" });\r\n\t} catch (error) {\r\n\t\tres.status(500).send({ message: \"Internal Server Error\" });\r\n\t}\r\n});\r\n\r\nconst validate = (data) => {\r\n\tconst schema = Joi.object({\r\n\t\temail: Joi.string().email().required().label(\"Email\"),\r\n\t\tpassword: Joi.string().required().label(\"Password\"),\r\n\t});\r\n\treturn schema.validate(data);\r\n};\r\n\r\nmodule.exports = router;"],"file":"auth.dev.js"}